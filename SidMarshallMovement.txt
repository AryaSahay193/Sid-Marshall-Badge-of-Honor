using System;
using Godot;

public partial class sidmovement : CharacterBody2D {
	//General variables.
	private float walkingSpeed = 65.0f;
	private float runningSpeed = 156.0f;
	private float JumpingSpeed = -286.0f;
	private float slidingSpeed = 182.0f;

	//Timer Variables
	private float doubleJumpTimer = 2.0f;
	private float diveRollTimer = 1.0f;
	private float wallJumpTimer = 1.5f;
	private float doubleJumpTimerReset = 1.0f;
	private float diveRollTimerReset = 1.2f;
	private float wallJumpTimerReset = 1.0f;
	// Get the gravity from the project settings to be synced with RigidBody nodes.
	public float gravity = ProjectSettings.GetSetting("physics/2d/default_gravity").AsSingle();

	public override void _Ready() {
	}
	public override void _PhysicsProcess(double delta) {
		Vector2 velocity = Velocity;

		// Add the gravity.
		if (!IsOnFloor()) {
			velocity.Y += gravity * (float)delta;
			//GetNode<AnimatedSprite2D>("AnimatedSprite").Play("Jump Fall");
			}

		// Handle Jump.
		/*TO-DO: Add timer logic for double-jump, dive-roll and wall-jump. You can jump extra only once, 
		and while you are jumping, you cannot interact with the character (you can change direction 
		midair for double-jump, however).*/

		// Get the input direction and handle the movement/deceleration.
		// As good practice, you should replace UI actions with custom gameplay actions.
		Vector2 direction = Input.GetVector("ui_left", "ui_right", "ui_up", "ui_down");
		
		//GetNode<AnimatedSprite2D>("AnimatedSprite2D").Play("Jump");
		if (Input.IsActionJustPressed("ui_jump") && IsOnFloor()) {
			if(direction == Vector2.Left) {
				velocity.X = -walkingSpeed;
				velocity.Y = JumpingSpeed;
			} else if(direction == Vector2.Right) {
				velocity.X = walkingSpeed;
				velocity.Y = JumpingSpeed;
			}
		}

		GetNode<AnimatedSprite2D>("AnimatedSprite2D").Play("Walk"); //Plays walk animation by default.
		if(direction == Vector2.Right) {
			velocity.X = direction.X * walkingSpeed;
			GetNode<AnimatedSprite2D>("AnimatedSprite2D").FlipH = false; //Direction is nonzero which means character is moving. Play walk animation.
		} else if(direction == Vector2.Left) {
			velocity.X = -direction.X * -walkingSpeed;
			GetNode<AnimatedSprite2D>("AnimatedSprite2D").FlipH = true; //Direction is nonzero which means character is moving. Play walk animation.
		} else if(direction == Vector2.Zero) {
			velocity.X = Mathf.MoveToward(Velocity.X, 0, walkingSpeed);
			GetNode<AnimatedSprite2D>("AnimatedSprite2D").Play("Idle"); //Direction = 0, which means movement equals 0. Play idle animation.
		}

		//Running mechanism.
		if(Input.IsActionPressed("ui_run") && Input.IsActionPressed("ui_left") && IsOnFloor()) {
			GetNode<AnimatedSprite2D>("AnimatedSprite2D").Play("Run");
			velocity.X = Mathf.MoveToward(Velocity.X, -runningSpeed, walkingSpeed);
			GetNode<AnimatedSprite2D>("AnimatedSprite2D").FlipH = true;
		} else if(Input.IsActionPressed("ui_run") && Input.IsActionPressed("ui_right")) {
			velocity.X = Mathf.MoveToward(Velocity.X, runningSpeed, walkingSpeed);
			GetNode<AnimatedSprite2D>("AnimatedSprite2D").FlipH = false;
		}

		/*if (direction != Vector2.Zero) { //If the object is moving, aka, if the vector is nonzero.
			velocity.X = direction.X * walkingSpeed;
			GetNode<AnimatedSprite2D>("AnimatedSprite2D").Play("Walk"); //Direction is nonzero which means character is moving. Play walk animation.
		} else {
			velocity.X = Mathf.MoveToward(Velocity.X, 0, walkingSpeed);
			GetNode<AnimatedSprite2D>("AnimatedSprite2D").Play("Idle"); //Direction = 0, which means movement equals 0. Play idle animation.
		}*/

		//Running mechanism.
		/*if(Input.IsActionPressed("ui_run") && Input.IsActionPressed("ui_left") && IsOnFloor()) {
			velocity.X = Mathf.MoveToward(Velocity.X, -runningSpeed, walkingSpeed);
			GetNode<AnimatedSprite2D>("AnimatedSprite2D").Play("Run");
		} else if(Input.IsActionPressed("ui_run") && Input.IsActionPressed("ui_right")) {
			velocity.X = Mathf.MoveToward(Velocity.X, runningSpeed, walkingSpeed);
		}*/

		//Sliding mechanism.
		/*if(IsOnFloor() && Input.IsActionPressed("ui_run") && Input.IsActionPressed("ui_left") && Input.IsActionPressed("ui_action")) {
		//You can only slide if you are on the floor, and if you are running.
			GetNode<AnimatedSprite2D>("AnimatedSprite2D").Play("Slide");
			velocity.X = Mathf.MoveToward(runningSpeed, -slidingSpeed, Velocity.X);
			GetNode<AnimatedSprite2D>("AnimatedSprite2D").Play("Slide (Loop)");
			velocity.X = Mathf.MoveToward(-slidingSpeed, 0, -Velocity.X);
			GetNode<AnimatedSprite2D>("AnimatedSprite2D").Play("Slide (Recover)");
		} else if(IsOnFloor() && Input.IsActionPressed("ui_run") && Input.IsActionPressed("ui_right") && Input.IsActionPressed("ui_action")) {
			GetNode<AnimatedSprite2D>("AnimatedSprite2D").FlipH = true;
			velocity.X = Mathf.MoveToward(runningSpeed, slidingSpeed, Velocity.X);
			GetNode<AnimatedSprite2D>("AnimatedSprite2D").FlipH = true;
			velocity.X = Mathf.MoveToward(slidingSpeed, 0, Velocity.X);
			GetNode<AnimatedSprite2D>("AnimatedSprite2D").FlipH = true;
		}*/

		Velocity = velocity;
		MoveAndSlide();
	}
}
